{"version":3,"sources":["Main/logo.svg","HelloWorld/HelloWorld.js","ArraySorter/ArraySorter.js","Main/Home.js","Main/App.js","Main/serviceWorker.js","index.js"],"names":["module","exports","HelloWorld","ArrayModel","data","listOfRectangles","this","x","y","tmp","React","Component","num","min","max","array","i","height","Math","random","push","style","float","background","width","rectangle","aspectRatio","ArraySorter","useState","setData","onClick","plus","Home","className","src","logo","alt","Navigation","Style","to","App","Main","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,gLCS5BC,MARf,WAEI,OACI,6BACG,8C,2ECmBLC,E,YAEF,aACC,IAAD,8BACI,+CACKC,KAAOC,EAAiB,EAAG,IAAK,IAFzC,E,sEAMI,OAAQC,KAAKF,O,6BAGVG,EAAGC,GAEN,IAAIC,EAAMH,KAAKF,KAAKG,GACpBD,KAAKF,KAAKG,GAAKD,KAAKF,KAAKI,GACzBF,KAAKF,KAAKI,GAAKC,M,GAhBEC,IAAMC,WAmB/B,SAASN,EAAiBE,EAAGC,EAAGI,GAG5B,IADA,IAqBeC,EAAKC,EArBhBC,EAAQ,GACJC,EAAI,EAAGA,EAAIJ,EAAKI,IACxB,CACI,IAAIC,GAkBOJ,EAlBY,EAkBPC,EAlBUN,EAoBtBU,KAAKC,SAAWL,EAAOD,GAnB3BE,EAAMK,KACF,wBAAIC,MAAO,CAACC,MAAO,OAAQC,WAAY,UAAWC,MAAOjB,EAAGU,OAAQA,IAAWQ,EAAUlB,EAAEU,KAGnG,OAAQF,EAKZ,SAASU,EAAUlB,EAAGC,GAElB,OACI,kBAAC,IAAD,CAAWkB,YAAa,CAAC,EAAG,IACxB,yBAAKL,MAAO,CAAEE,WAAY,UAAWC,MAAO,OAAQP,OAAQ,WAQzDU,MAlEf,WACC,IAAD,EAC4BC,mBAAS,IAAIzB,GADzC,mBACWC,EADX,KACiByB,EADjB,KASI,OACI,6BACI,4BACKzB,EAAKA,MAEV,4BAAQ0B,QAAS,kBAXzB,SAAc1B,GACVA,EAAKA,KAAKgB,KAAKf,EAAiB,EAAG,IAAK,IACxCwB,EAAQzB,GASmB2B,CAAK3B,KAA5B,qB,iCCNG4B,MATf,WACI,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,YCQnDC,EAAa,kBACf,6BACI,wBAAIhB,MAAOiB,KACP,wBAAIjB,MAAOiB,KAAO,kBAAC,IAAD,CAASC,GAAG,KAAZ,SAClB,4BAAI,kBAAC,IAAD,CAASA,GAAG,eAAZ,eACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,gBAAZ,mBAKDC,EAnBH,WACV,OACE,yBAAKP,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QAiBFQ,EAAO,WACT,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IACjC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,eAAeC,UAAW1C,IAC5C,kBAAC,IAAD,CAAOwC,OAAK,EAACC,KAAK,gBAAgBC,UAAWjB,MCrBrCkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,IAAD,SAAgB,kBAAC,EAAD,MAAhB,KAA0CC,SAASC,eAAe,SD0H5E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.46d04b0e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\"\nfunction HelloWorld()\n{\n    return (\n        <div>\n           <h1>HELLO WORLD!</h1>\n        </div>\n    );\n}\nexport default HelloWorld;","import React from \"react\"\nimport Rectangle from \"react-rectangle\";\nimport {useState} from \"react\";\nimport itemStyle from \"./ArrayStyle.css\"\nfunction ArraySorter()\n{\n    const [data, setData] = useState(new ArrayModel());\n\n    function plus(data) {\n        data.data.push(listOfRectangles(0, 600, 1));\n        setData(data);\n    }\n\n\n    return(\n        <div>\n            <ul>\n                {data.data}\n            </ul>\n            <button onClick={() => plus(data)}>Add a Rectangle</button>\n        </div>\n\n    );\n}\nclass ArrayModel extends React.Component\n{\n    constructor()\n    {\n        super();\n        this.data = listOfRectangles(5, 600, 10);\n    }\n    render()\n    {\n        return (this.data);\n    }\n\n    change(x, y)\n    {\n        let tmp = this.data[x];\n        this.data[x] = this.data[y];\n        this.data[y] = tmp;\n    }\n}\nfunction listOfRectangles(x, y, num)\n{\n    let array = [];\n    for(let i = 0; i < num; i++)\n    {\n        let height = randomNum(0, y);\n        array.push(\n            <li style={{float: \"Left\", background: '#9e9e9e', width: x, height: height }}>{rectangle(x,height)}</li>\n        );\n    }\n    return (array);\n\n\n\n}\nfunction rectangle(x, y)\n{\n    return (\n        <Rectangle aspectRatio={[5, 3]}>\n            <div style={{ background: '#607d8b', width: '100%', height: '100%' }} />\n        </Rectangle>\n    );\n}\nfunction randomNum(min, max)\n{\n    return (Math.random() * max) + min;\n}\nexport default ArraySorter;","import React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nfunction Home(){\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </header>\n        </div>\n    );\n}\nexport default Home;","import React from 'react';\n\nimport {Switch, Route, NavLink} from \"react-router-dom\"\nimport HelloWorld from '../HelloWorld/HelloWorld.js'\nimport ArraySorter from '../ArraySorter/ArraySorter.js'\nimport Home from './Home.js'\nimport Style from './App.css'\nconst App = () => {\n  return (\n    <div className=\"App\">\n        <Navigation />\n        <Main />\n    </div>\n  );\n}\n\nconst Navigation = () => (\n    <nav>\n        <ul style={Style}>\n            <li style={Style}><NavLink to='/'>Home</NavLink></li>\n            <li><NavLink to='/HelloWorld'>HelloWorld</NavLink></li>\n            <li><NavLink to='/ArraySorter'>ArraySorter</NavLink></li>\n        </ul>\n    </nav>\n);\n\nexport default App;\n\nconst Main = () => {\n    return (\n        <Switch>\n            <Route exact path='/' component={Home}></Route>\n            <Route exact path='/HelloWorld/' component={HelloWorld}></Route>\n            <Route exact path='/ArraySorter/' component={ArraySorter}></Route>\n        </Switch>\n    );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from \"react-router-dom\";\nimport './index.css';\nimport App from './Main/App';\nimport * as serviceWorker from './Main/serviceWorker';\n\nReactDOM.render(<BrowserRouter> <App /> </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}