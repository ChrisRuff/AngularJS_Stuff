{"version":3,"sources":["Main/logo.svg","HelloWorld/HelloWorld.js","ArraySorter/ArraySorter.js","Main/Home.js","Main/App.js","Main/serviceWorker.js","index.js"],"names":["module","exports","HelloWorld","ArraySorter","props","state","data","listOfRectangles","count","this","onClick","plus","selectionSort","removeFirst","push","update","setState","len","length","console","log","key","i","min","j","tmp","milliseconds","start","Date","getTime","pop","x","y","num","array","height","randomNum","style","float","background","width","rectangle","aspectRatio","max","Math","random","React","Component","Home","className","src","logo","alt","Navigation","Style","to","App","Main","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.34858f9e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\"\nfunction HelloWorld()\n{\n    return (\n        <div>\n           <h1>HELLO WORLD!</h1>\n        </div>\n    );\n}\nexport default HelloWorld;","import React from \"react\"\nimport Rectangle from \"react-rectangle\";\nimport itemStyle from \"./ArrayStyle.css\"\n\nclass ArraySorter extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            data: this.listOfRectangles(5, 600, 5)\n        };\n        this.count = 0;\n    }\n    render()\n    {\n        return(\n        <div>\n            <ul>\n                {this.state.data}\n            </ul>\n            <button onClick={() => this.plus()}>Add a Rectangle</button>\n            <button onClick={() => this.selectionSort()}>Selection Sort</button>\n            <button onClick={() => this.removeFirst()}>Remove first</button>\n        </div>);\n    }\n    plus()\n    {\n        this.state.data.push(this.listOfRectangles(5,600,1)[0]);\n        this.update();\n    }\n    update()\n    {\n        this.setState({\n            data: this.state.data\n        });\n    }\n    selectionSort()\n    {\n\n        let len = this.state.data.length;\n        console.log(\"height: \" + this.state.data[0].key + \"\\nLength: \" + len);\n        for (let i = 0; i < len; i++) {\n            let min = i;\n\n            for (let j = i + 1; j < len; j++) {\n                if (this.state.data[min].key > this.state.data[j].key) {\n                    min = j;\n                }\n            }\n\n            if (min !== i) {\n                let tmp = this.state.data[i];\n                this.state.data[i] = this.state.data[min];\n                this.state.data[min] = tmp;\n                this.update();\n\n            }\n\n\n\n\n        }\n\n    }\n    sleep(milliseconds)\n    {\n        let start = new Date().getTime();\n        for (let i = 0; i < 1e7; i++)\n        {\n            if ((new Date().getTime() - start) > milliseconds){\n                break;\n            }\n        }\n    }\n    removeFirst()\n    {\n        this.state.data[0] = this.state.data[this.state.data.length-1];\n        this.state.data.pop();\n        this.update();\n    }\n\n    change(x, y)\n    {\n        let tmp = this.state.data[x];\n        this.state.data[x] = this.state.data[y];\n        this.state.data[y] = tmp;\n    }\n\n    listOfRectangles(x, y, num)\n    {\n        let array = [];\n        for(let i = 0; i < num; i++)\n        {\n            let height = this.randomNum(0, y);\n            array.push(\n                <li key={height} style={{float: \"Left\", background: '#9e9e9e', width: x, height: height }}>{this.rectangle(x,height)}</li>\n            );\n        }\n        return (array);\n    }\n    rectangle(x, y)\n    {\n        return (\n            <Rectangle aspectRatio={[5, 3]}>\n                <div style={{ background: '#607d8b', width: '100%', height: '100%' }} />\n            </Rectangle>\n        );\n    }\n    randomNum(min, max)\n    {\n        return (Math.random() * max) + min;\n    }\n}\n\nexport default ArraySorter;","import React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nfunction Home(){\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </header>\n        </div>\n    );\n}\nexport default Home;","import React from 'react';\n\nimport {Switch, Route, NavLink} from \"react-router-dom\"\nimport HelloWorld from '../HelloWorld/HelloWorld.js'\nimport ArraySorter from '../ArraySorter/ArraySorter.js'\nimport Home from './Home.js'\nimport Style from './App.css'\nconst App = () => {\n  return (\n    <span className=\"App\">\n        <Navigation />\n        <Main />\n    </span>\n  );\n}\n\nconst Navigation = () => (\n    <nav>\n        <ul style={Style}>\n            <li style={Style}><NavLink to='/'>Home</NavLink></li>\n            <li><NavLink to='/HelloWorld'>HelloWorld</NavLink></li>\n            <li><NavLink to='/ArraySorter'>ArraySorter</NavLink></li>\n        </ul>\n    </nav>\n);\n\nexport default App;\n\nconst Main = () => {\n    return (\n        <Switch>\n            <Route exact path='/' component={Home}></Route>\n            <Route exact path='/HelloWorld/' component={HelloWorld}></Route>\n            <Route exact path='/ArraySorter/' component={ArraySorter}></Route>\n        </Switch>\n    );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from \"react-router-dom\";\nimport './index.css';\nimport App from './Main/App';\nimport * as serviceWorker from './Main/serviceWorker';\n\nReactDOM.render(<BrowserRouter> <App /> </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}